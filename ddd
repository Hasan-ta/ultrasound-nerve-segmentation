from __future__ import print_function

import os
import numpy as np

from skimage.io import imsave, imread
from sklearn.model_selection import train_test_split


data_path = '../raw/'

image_rows = 420
image_cols = 580

mean = np.load('train_mean.npy')
std = np.load('train_std.npy')


def create_train_data():
    train_data_path = os.path.join(data_path, 'train')
    images = os.listdir(train_data_path)
    total = len(images) / 2

    imgs = np.ndarray((total, image_rows, image_cols), dtype=np.uint8)
    imgs_mask = np.ndarray((total, image_rows, image_cols), dtype=np.uint8)

    i = 0
    print('-'*30)
    print('Creating training images...')
    print('-'*30)
    for image_name in images:
        if 'mask' in image_name:
            continue
        image_mask_name = image_name.split('.')[0] + '_mask.tif'
        img = imread(os.path.join(train_data_path, image_name), as_grey=True)
        img_mask = imread(os.path.join(train_data_path, image_mask_name), as_grey=True)

        img = np.array([img])
        img_mask = np.array([img_mask])

        imgs[i] = img
        imgs_mask[i] = img_mask
        print(img.shape)

        if i % 100 == 0:
            print('Done: {0}/{1} images'.format(i, total))
        i += 1
    
    
    imgs_train, imgs_val, imgs_mask_train, imgs_mask_val = train_test_split(imgs, imgs_mask, test_size=0.15, random_state=42)

    np.save('imgs_train.npy', imgs_train)
    np.save('imgs_mask_train.npy', imgs_mask_train)
    np.save('imgs_val.npy',imgs_val)
    np.save('imgs_mask_val.npy',imgs_mask_val)
    
    print('Loading done.')
    print('Saving to .npy files done.')


def load_train_data():
    imgs_train = np.load('imgs_train.npy')
    imgs_mask_train = np.load('imgs_mask_train.npy')
    return imgs_train, imgs_mask_train

def load_val_data():
    imgs_val = np.load('imgs_val.npy')
    imgs_mask_val = np.load('imgs_mask_val.npy')
    return imgs_val, imgs_mask_val


def create_test_data():
    train_data_path = os.path.join(data_path, 'test')
    images = os.listdir(train_data_path)
    total = len(images)

    imgs = np.ndarray((total, image_rows, image_cols), dtype=np.uint8)
    imgs_id = np.ndarray((total, ), dtype=np.int32)

    i = 0
    print('-'*30)
    print('Creating test images...')
    print('-'*30)
    for image_name in images:
        img_id = int(image_name.split('.')[0])
        img = imread(os.path.join(train_data_path, image_name), as_grey=True)

        img = np.array([img])

        imgs[i] = img
        imgs_id[i] = img_id

        if i % 100 == 0:
            print('Done: {0}/{1} images'.format(i, total))
        i += 1
    print('Loading done.')

    np.save('imgs_test.npy', imgs)
    np.save('imgs_id_test.npy', imgs_id)
    print('Saving to .npy files done.')


def load_test_data():
    imgs_test = np.load('imgs_test.npy')
    imgs_id = np.load('imgs_id_test.npy')
    return imgs_test, imgs_id

if __name__ == '__main__':
    ''''''
    #create_train_data()
    #create_test_data()








import cv2
model = get_unet()
model.load_weights('weights.h5')

imgs_val, imgs_mask_val = load_val_data()
imgs_val = preprocess(imgs_val)
imgs_mask_val = preprocess(imgs_mask_val)

imgs_mask_val = imgs_mask_val.astype('float32')
imgs_mask_val /= 255.  # scale masks to [0, 1]


mean = np.load('train_mean.npy')
std = np.load('train_std.npy')

imgs_val = imgs_val.astype('float32')
#imgs_val = imgs_val/255.0
#imgs_val -= mean
#imgs_val /= std

y_val_pred = model.predict(imgs_val, verbose=1)

import numpy as np
from matplotlib import pyplot as plt
from matplotlib import animation
from JSAnimation import IPython_display
%matplotlib inline

original_val, temp = load_val_data()
original_val = preprocess(original_val)

nx = 300
ny = 300

fig = plt.figure()
data = np.zeros((nx, ny))
im = plt.imshow(data, cmap='gist_gray_r', vmin=0, vmax=1)

def init():
    im.set_data(np.zeros((nx, ny)))

def animate(i):
    mask = cv2.Canny((y_val_pred[i]*255).astype(np.uint8), 100, 200)
    y_val_th = cv2.Canny((imgs_mask_val[i]*255).astype(np.uint8), 100, 200)
    
    xx = cv2.cvtColor(original_val[i], cv2.COLOR_GRAY2RGB)
    # Red is true Blue is prediction
    xx[np.where((mask[:,:]>0.5))[0],np.where((mask[:,:]>0.5))[1],2] = 255;
    xx[np.where((mask[:,:]>0.5))[0],np.where((mask[:,:]>0.5))[1],1] = 0;
    xx[np.where((mask[:,:]>0.5))[0],np.where((mask[:,:]>0.5))[1],0] = 0;
    
    xx[np.where((y_val_th>0.5))[0],np.where((y_val_th>0.5))[1],2] = 0;
    xx[np.where((y_val_th>0.5))[0],np.where((y_val_th>0.5))[1],1] = 0;
    xx[np.where((y_val_th>0.5))[0],np.where((y_val_th>0.5))[1],0] = 255;
    xx = cv2.resize(xx,(300,300))
    
    im.set_data(xx)
    return im

animation.FuncAnimation(fig, animate, init_func=init, frames=200,
                               interval=1000)


#for i,mask in enumerate(y_val_pred):

    
    #cv2.addWeighted(xx, 0.5, (a/255).astype(np.float32), 0.5, 0.2, xx)
    #cv2.addWeighted(xx, .5, (b/255).astype(np.float32), 0.5, 0.2, xx)
    
    #xx = cv2.cvtColor(xx,cv2.COLOR_RGB2BGR)
    #cv2.imshow('image',xx)
    #cv2.waitKey(0)
